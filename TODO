Create a teacher-student crm
It needs to be TDD - test driven development
All storage should be done on S3
This is for portfolio so it needds to be good
Roles need to be well implemented
The app needs to be well documented
Would be nice to add CI/CD
Has to have a precommit hook for testing and standardazing

Step 0:
    - Create a basic CI/CD pipeline
    - create a precommit test hook
    - create a precommit standardizing hook
    - clean up the view clutter
    - create a README.md
    - clean up code clutter
    - create an amazing Documentation
    - create translation

Step 1: Authentication
    1. Create a student-student Model DONE
    2. Create User-Role relation DONE
    3. Create Role middleware DONE
    4. Remove register method DONE
    5. Test it DONE

Step 2: New Users
    6. Only Admin can register new users, but a teacher can create Students DONE
    7. Create custom input renderer DONE
    8. Create view for creating new users with the renderer DONE
    9. Make Test DONE
    10. Refactor DONE

Step 3: List Users
    11. Create a list of users DONR
    12. Create a view for listing users DONE
    13. Permission for who sees which users DONE
    14. Make Test DONE
    15. Refactor DONE

Step 4: Update and Delete Users
    16. Add remove methods DONE
    17. Add remove buttons DONE
    18. Add update method and button DONE
    19. Make Test DONE
    20. Refactor DONE

Step 5: Create Classes
    21. Create a course model
    22. Create a coursees migration
    23. Connect Admin, Teacher, and Student to the course model
    24. Create a view for creating coursees
    25. Create a view for listing coursees
    LOGIC:  Admin can create coursees, teacher can assign students to coursees
            User can only see coursees they are assigned to, and has many coursees
            Teacher can only see coursees they are assigned to, and has many coursees, they can assign students to their coursees
            Admin can see all coursees, has no relation to coursees, but can create classes and assign teachers to them

Stage 2 (A.K.A stuff that was not implemented in stage 1 mostly because of lazyness):
    1. Input rederer should be way more modifiable and written better(select)
    2. Roles have some messy logic
    3. Add good validation for NewUserRequest

Finishing touches:
    1. All css to should be in one place
    2. App should be publishable
    3. All javascript should be in one place
    4. It should be 100% test covered
    5. Whole code should be reviewed and prettified 